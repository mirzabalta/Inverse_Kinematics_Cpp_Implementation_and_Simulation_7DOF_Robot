/*
 * File: IK_BFGS.cpp
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand, 
 *   you must change it only in the area defined as:  
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text' 
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  ------------------------------------------------------------------------- 
 *
 * Created: Sat Sep 21 14:11:35 2024
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME IK_BFGS
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS            2
/* Input Port  0 */
#define IN_PORT_0_NAME        Pose
#define INPUT_0_WIDTH         4
#define INPUT_DIMS_0_COL      4
#define INPUT_0_DTYPE         real_T
#define INPUT_0_COMPLEX       COMPLEX_NO
#define IN_0_FRAME_BASED      FRAME_NO
#define IN_0_BUS_BASED        0
#define IN_0_BUS_NAME         
#define IN_0_DIMS             2-D
#define INPUT_0_FEEDTHROUGH   1
#define IN_0_ISSIGNED         0
#define IN_0_WORDLENGTH       8
#define IN_0_FIXPOINTSCALING  1
#define IN_0_FRACTIONLENGTH   9
#define IN_0_BIAS             0
#define IN_0_SLOPE            0.125
/* Input Port  1 */
#define IN_PORT_1_NAME        Init
#define INPUT_1_WIDTH         7
#define INPUT_DIMS_1_COL      1
#define INPUT_1_DTYPE         real_T
#define INPUT_1_COMPLEX       COMPLEX_NO
#define IN_1_FRAME_BASED      FRAME_NO
#define IN_1_BUS_BASED        0
#define IN_1_BUS_NAME         
#define IN_1_DIMS             1-D
#define INPUT_1_FEEDTHROUGH   1
#define IN_1_ISSIGNED         0
#define IN_1_WORDLENGTH       8
#define IN_1_FIXPOINTSCALING  1
#define IN_1_FRACTIONLENGTH   9
#define IN_1_BIAS             0
#define IN_1_SLOPE            0.125

#define NUM_OUTPUTS           2
/* Output Port  0 */
#define OUT_PORT_0_NAME       Config
#define OUTPUT_0_WIDTH        7
#define OUTPUT_DIMS_0_COL     1
#define OUTPUT_0_DTYPE        real_T
#define OUTPUT_0_COMPLEX      COMPLEX_NO
#define OUT_0_FRAME_BASED     FRAME_NO
#define OUT_0_BUS_BASED       0
#define OUT_0_BUS_NAME        
#define OUT_0_DIMS            1-D
#define OUT_0_ISSIGNED        1
#define OUT_0_WORDLENGTH      8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH  3
#define OUT_0_BIAS            0
#define OUT_0_SLOPE           0.125
/* Output Port  1 */
#define OUT_PORT_1_NAME       CriterionValue
#define OUTPUT_1_WIDTH        1
#define OUTPUT_DIMS_1_COL     1
#define OUTPUT_1_DTYPE        real_T
#define OUTPUT_1_COMPLEX      COMPLEX_NO
#define OUT_1_FRAME_BASED     FRAME_NO
#define OUT_1_BUS_BASED       0
#define OUT_1_BUS_NAME        
#define OUT_1_DIMS            1-D
#define OUT_1_ISSIGNED        1
#define OUT_1_WORDLENGTH      8
#define OUT_1_FIXPOINTSCALING 1
#define OUT_1_FRACTIONLENGTH  3
#define OUT_1_BIAS            0
#define OUT_1_SLOPE           0.125

#define NPARAMS               0

#define SAMPLE_TIME_0         INHERITED_SAMPLE_TIME
#define NUM_DISC_STATES       0
#define DISC_STATES_IC        [0]
#define NUM_CONT_STATES       0
#define CONT_STATES_IC        [0]

#define SFUNWIZ_GENERATE_TLC  1
#define SOURCEFILES           "__SFB__"
#define PANELINDEX            8
#define USE_SIMSTRUCT         0
#define SHOW_COMPILE_STEPS    0
#define CREATE_DEBUG_MEXFILE  0
#define SAVE_CODE_ONLY        0
#define SFUNWIZ_REVISION      3.0
/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"


extern void IK_BFGS_Outputs_wrapper(const real_T *Pose,
			const real_T *Init,
			real_T *Config,
			real_T *CriterionValue);
/*=============================*
 * Data Transposition Routines *
 *=============================*/
int linear_idx(const int srcdims[], const int numdims, const int dstk)
{
    int idxCurDim;
    int i, j;
    int srck = 0, dstk_remainingDims = dstk;
    for(i=0,j=numdims-1; i<numdims; i++, j--){
        idxCurDim = dstk_remainingDims % srcdims[j];
        srck = srck * srcdims[j] + idxCurDim;
        dstk_remainingDims = dstk_remainingDims / srcdims[j];
    }
    return srck;
}

/*
  A is [N1xN2xN3] and T is [N3xN2xN1]
  A[n1,n2,n3]=T[n3,n2,n1]
  
  1) Given linear index k = n1+N1*(n2+N2*n3), find [n1,n2,n3]
  2) Compute corresponding linear index k' = n3+N3*(n2+N2*n1)
  3) Use linear index to assign A[k] = T[k']

  Example input:
  src:     A matrix memory pointer
  srcdims: [N1,N2, N3]
  numdims: 3
  dst:     T matrix memory pointer
  elsize:  sizeof(double)/sizeof(char) 
 */
void NDTransposeBySrcSpecs(void *dst, const void *src, const int srcdims[], const int numdims, const int elsize)
{
    int w = srcdims[0];
    int k;
    for (k = 1; k < numdims; k ++) {
        w *= srcdims[k];
    }
   
    for (k = 0; k < w; k ++) {
        int sk = linear_idx(srcdims, numdims, k);
        int offset = k * elsize;
        memcpy((char*)dst + k * elsize, (const char*)src + sk * elsize, elsize);
    }
}

void NDTransposeByDstSpecs(void *dst, const void *src, const int dstdims[], const int numdims, const int elsize)
{
    int w = dstdims[0];
    int k;
    for (k = 1; k < numdims; k ++) {
        w *= dstdims[k];
    }
   
    for (k = 0; k < w; k ++) {
        int dk = linear_idx(dstdims, numdims, k);
        int offset = k * elsize;
        memcpy((char*)dst + dk * elsize, (const char*)src + k * elsize, elsize);
    }
}
/*====================*
 * S-function methods *
 *====================*/
/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S)
{

    DECL_AND_INIT_DIMSINFO(inputDimsInfo);
    DECL_AND_INIT_DIMSINFO(outputDimsInfo);
    ssSetNumSFcnParams(S, NPARAMS);
    if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
        return; /* Parameter mismatch will be reported by Simulink */
    }

    ssSetArrayLayoutForCodeGen(S, SS_ROW_MAJOR);

    ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);

    ssSetNumContStates(S, NUM_CONT_STATES);
    ssSetNumDiscStates(S, NUM_DISC_STATES);


    if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;
    /* Input Port 0 */
    inputDimsInfo.width = INPUT_0_WIDTH;
    ssSetInputPortDimensionInfo(S, 0, &inputDimsInfo);
    ssSetInputPortMatrixDimensions(S, 0, INPUT_0_WIDTH, INPUT_DIMS_0_COL);
    ssSetInputPortFrameData(S, 0, IN_0_FRAME_BASED);
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/

    /* Input Port 1 */
    ssSetInputPortWidth(S, 1, INPUT_1_WIDTH);
    ssSetInputPortDataType(S, 1, SS_DOUBLE);
    ssSetInputPortComplexSignal(S, 1, INPUT_1_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 1, INPUT_1_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/


    if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;
    /* Output Port 0 */
    ssSetOutputPortWidth(S, 0, OUTPUT_0_WIDTH);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
    /* Output Port 1 */
    ssSetOutputPortWidth(S, 1, OUTPUT_1_WIDTH);
    ssSetOutputPortDataType(S, 1, SS_DOUBLE);
    ssSetOutputPortComplexSignal(S, 1, OUTPUT_1_COMPLEX);
    if (!ssSetNumDWork(S, 4)) return;

    /*
     * Configure the dwork 0 (Pose_t)
     */
    ssSetDWorkDataType(S, 0, ssGetInputPortDataType(S, 0));
    ssSetDWorkUsageType(S, 0, SS_DWORK_USED_AS_SCRATCH);
    ssSetDWorkName(S, 0, "Pose_t");
    ssSetDWorkWidth(S, 0, ssGetInputPortWidth(S, 0));
    ssSetDWorkComplexSignal(S, 0, COMPLEX_NO);

    /*
     * Configure the dwork 1 (Init_t)
     */
    ssSetDWorkDataType(S, 1, ssGetInputPortDataType(S, 1));
    ssSetDWorkUsageType(S, 1, SS_DWORK_USED_AS_SCRATCH);
    ssSetDWorkName(S, 1, "Init_t");
    ssSetDWorkWidth(S, 1, ssGetInputPortWidth(S, 1));
    ssSetDWorkComplexSignal(S, 1, COMPLEX_NO);

    /*
     * Configure the dwork 2 (Config_t)
     */
    ssSetDWorkDataType(S, 2, ssGetOutputPortDataType(S, 0));
    ssSetDWorkUsageType(S, 2, SS_DWORK_USED_AS_SCRATCH);
    ssSetDWorkName(S, 2, "Config_t");
    ssSetDWorkWidth(S, 2, ssGetOutputPortWidth(S, 0));
    ssSetDWorkComplexSignal(S, 2, COMPLEX_NO);

    /*
     * Configure the dwork 3 (CriterionValue_t)
     */
    ssSetDWorkDataType(S, 3, ssGetOutputPortDataType(S, 1));
    ssSetDWorkUsageType(S, 3, SS_DWORK_USED_AS_SCRATCH);
    ssSetDWorkName(S, 3, "CriterionValue_t");
    ssSetDWorkWidth(S, 3, ssGetOutputPortWidth(S, 1));
    ssSetDWorkComplexSignal(S, 3, COMPLEX_NO);
    ssSetNumPWork(S, 0);

    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);

    ssSetSimulinkVersionGeneratedIn(S, "10.1");

    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, SS_OPTION_EXCEPTION_FREE_CODE);
}

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, SAMPLE_TIME_0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
    ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_INPUT_PORT_DATA_TYPE
static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetInputPortDataType(S, 0, dType);
}

#define MDL_SET_OUTPUT_PORT_DATA_TYPE
static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType)
{
    ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES
static void mdlSetDefaultPortDataTypes(SimStruct *S)
{
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START)
/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S)
{
}
#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
    const real_T *Pose = (real_T *) ssGetInputPortRealSignal(S, 0);
    const real_T *Init = (real_T *) ssGetInputPortRealSignal(S, 1);
    real_T *Config = (real_T *) ssGetOutputPortRealSignal(S, 0);
    real_T *CriterionValue = (real_T *) ssGetOutputPortRealSignal(S, 1);

    /* S-Function Builder Row Major Support has been enabled for custom
     * code, a transposed copy will be created for any array signals.
     */
    real_T *Pose_t = (real_T *)ssGetDWork(S, 0);
    real_T *Init_t = (real_T *)ssGetDWork(S, 1);
    real_T *Config_t = (real_T *)ssGetDWork(S, 2);
    real_T *CriterionValue_t = (real_T *)ssGetDWork(S, 3);

    NDTransposeBySrcSpecs((void*)Pose_t, (const void*)Pose, ssGetInputPortDimensions(S, 0), ssGetInputPortNumDimensions(S, 0), sizeof(real_T));
    NDTransposeBySrcSpecs((void*)Init_t, (const void*)Init, ssGetInputPortDimensions(S, 1), ssGetInputPortNumDimensions(S, 1), sizeof(real_T));
    IK_BFGS_Outputs_wrapper(Pose_t, Init_t, Config_t, CriterionValue_t);
    NDTransposeByDstSpecs((void*)Config, (const void*)Config_t, ssGetOutputPortDimensions(S, 0), ssGetOutputPortNumDimensions(S, 0), sizeof(real_T));
    NDTransposeByDstSpecs((void*)CriterionValue, (const void*)CriterionValue_t, ssGetOutputPortDimensions(S, 1), ssGetOutputPortNumDimensions(S, 1), sizeof(real_T));

}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{

}


#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif



